# Copyright (c) 2022 Espresso Systems (espressosys.com)
# This file is part of the HotShot Query Service library.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU
# General Public License as published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program. If not,
# see <https://www.gnu.org/licenses/>.

[meta]
NAME = "hotshot-availability"
DESCRIPTION = "Historical HotShot ledger state"
FORMAT_VERSION = "0.1.0"

[route.getleaf]
PATH = ["leaf/:height", "leaf/hash/:hash"]
":height" = "Integer"
":hash" = "TaggedBase64"
DOC = """
Get a leaf by its position in the ledger (0 is the genesis leaf) or its hash.

Returns
```
{
    "leaf": {
        "view_number": integer,
        "justify_qc": QC,
        "parent_commitment": TaggedBase64,
        "block_hash": TaggedBase64,
        "timestamp": integer,
        "proposer_id": TaggedBase64,
    },
    "qc": QC,
}
```

Note that `leaf.justify_qc` is the quorum certificate linking this leaf to its parent, while `qc` is
the quorum certificate signing this leaf. Both QCs have the schema
```
{
    "block_commitment": TaggedBase64,
    "leaf_commitment": TaggedBase64,
    "view_number": integer,
    // Map from signing keys to (signature, vote) pairs
    "signatures": {TaggedBase64: [TaggedBase64, TaggedBase64]},
    genesis: boolean,
}
```
"""

[route.streamleaves]
PATH = ["stream/leaves/:height"]
METHOD = "SOCKET"
":height" = "Integer"
DOC = """
Subscribe to a stream of leaves in the order they are sequenced, starting at `:height`.

Opens a WebSockets connection and sends a stream of the same data type returned by `leaf/:height`.
"""

[route.streamblockheaders]
PATH = ["stream/block/headers/:height"]
METHOD = "SOCKET"
":height" = "Integer"
DOC = """
Subscribe to a stream that returns the metadata of available blocks, starting at `:height`.
Useful for applications like rollups that do not need to fetch the entire block.

Opens a WebSocket connection and sends a stream of block headers:
```
{
    "hash": TaggedBase64,
    "height": integer,
    "size": integer,
}
```
"""

[route.getblock]
PATH = ["block/:height", "block/hash/:hash"]
":height" = "Integer"
":hash" = "TaggedBase64"
DOC = """
Get a block by its position in the ledger (0 is the genesis block) or its hash.

Note that block data in HotShot disseminates asynchronously. That means that the full data for a
block may not be available immediately after that block is committed. In this situation, `block/i`
may succeed but `block/i` may fail. However, once `block/i` succeeds, it is guaranteed that
`block/i` will _eventually_ succeed, and return a block whose `hash` is the same as the
`block_hash` from the corresponding leaf.

HotShot consensus does not validate the blocks produced by block builders, and in particular it does
not prohibit duplicate blocks. While each block has a unique height there may be multiple blocks at
different heights with the same hash. In such cases, this endpoint will return the _earliest_ block
with the requested hash.

Returns
```
{
    "block": application-specific block type,
    "hash": TaggedBase64,
    "height": integer,
    "size": integer,
}
```
"""

[route.streamblocks]
PATH = ["stream/blocks/:height"]
METHOD = "SOCKET"
":height" = "Integer"
DOC = """
Subscribe to a stream of blocks in the order they are sequenced, starting at `:height`.

Opens a WebSockets connection and sends a stream of the same data type returned by `block/:height`.
"""

[route.gettransaction]
PATH = ["transaction/:height/:index", "transaction/hash/:hash"]
":height" = "Integer"
":index" = "Integer"
":hash" = "TaggedBase64"
DOC = """
Get a transaction by its `index` in the block at `height` or by its hash.

If specified, `:height` and `:index` represent the block containing the transaction and the index
of the transaction within the block, respectively. Otherwise, `:hash` is the hash of the
transaction.

HotShot consensus does not validate the transactions it sequences, and in particular it does not
prohibit duplicate transactions. While each transaction has a unique position in the log (indicated
by its height and index) there may be multiple transactions at different positions with the same
hash. In such cases, this endpoint will return the _earliest_ transaction with the requested hash.

The response includes the hash of the block containing this transaction as well as an application-
defined inclusion proof relative to the block hash. Applications may use `proof` to prove that the
returned transaction is actually a member of its block, but note that the proof system used here
will vary by application. Some may prove more (for example, a shared sequencer proving that the
transaction belongs not only to the block but to a section of the block dedicated to a specific
rollup), some may prove less (for example, a trusted query service may return `null` for the proof).

Returns
```
{
    "transaction": application-specific transaction type,
    "block_hash": TaggedBase64,
    "proof": application-specific proof type,
    "height": integer,
    "hash": TaggedBase64,
}
```
"""

[route.getstaketable]
PATH = ["getstaketable/:height", "getstaketable/view/:view_number"]
":height" = "Integer"
":view_number" = "Integer"
DOC = """
Get the stake table after `:height` leaves or after `:view_number`.

Returns a map from staking public keys to amounts.
"""
